คำถาม นักศึกษาได้เรียนรู้อะไรบ้างเกี่ยวกับความแตกต่างและคุณสมบัติของชนิดข้อมูลแต่ละประเภทบน ESP32 (เช่น int, float, char, bool, long, long long, unsigned int, byte, double)
คำตอบ ได้เรียนรู้ว่าชนิดข้อมูลแต่ละประเภทมีขนาดหน่วยความจำและช่วงค่าที่เก็บได้ต่างกัน เช่น int (4 ไบต์), long long (8 ไบต์), float (4 ไบต์), double (8 ไบต์) รวมถึงความแตกต่างด้านความแม่นยำและการใช้เก็บข้อมูล เช่น char ใช้เก็บอักขระ, bool ใช้เก็บค่า true/false, byte ใช้เก็บค่าตัวเลขเล็กๆ 0–255 เป็นต้น

คำถาม ความสำคัญของการเลือกใช้ชนิดข้อมูลที่เหมาะสมในการเขียนโปรแกรมคืออะไร
คำตอบ การเลือกชนิดข้อมูลที่เหมาะสมช่วยให้โปรแกรมใช้หน่วยความจำอย่างมีประสิทธิภาพ ป้องกันปัญหา overflow underflow และทำให้การคำนวณถูกต้องเหมาะสมกับงาน เช่น ใช้ float double สำหรับการคำนวณที่ต้องการความแม่นยำ และใช้ unsigned long long สำหรับเก็บค่าที่มีช่วงกว้างมาก

คำถาม ถ้านักศึกษาต้องการเก็บค่าเวลา (เป็นมิลลิวินาที) ซึ่งอาจมีค่าสูงถึงหลายพันล้านมิลลิวินาที นักศึกษาควรใช้ชนิดข้อมูลใดบน ESP32
คำตอบ ควรใช้ unsigned long long (64-bit) เพราะสามารถเก็บค่าจำนวนเต็มบวกที่มีค่ามากถึงประมาณ 18 ควินทริลเลียน (2^64 – 1) เพียงพอสำหรับเก็บค่าเวลาในระดับพันล้านมิลลิวินาที

คำถาม อธิบายความแตกต่างระหว่าง float และ double ในแง่ของขนาดหน่วยความจำและความแม่นยำ
คำตอบ
1)float ใช้ 4 ไบต์ ความแม่นยำประมาณ 6–7 หลักทศนิยม
2)double ใช้ 8 ไบต์ ความแม่นยำประมาณ 15–16 หลักทศนิยม
3)ดังนั้น double เหมาะกับงานที่ต้องการความละเอียดสูงในการคำนวณทางวิทยาศาสตร์หรือการเงิน

คำถาม อธิบายแนวคิดเรื่อง Overflow และ Underflow ที่เกิดขึ้นกับชนิดข้อมูลจำนวนเต็ม (เช่น int, byte) พร้อมยกตัวอย่างจากใบงานนี้
คำตอบ
1)Overflow คือการที่ค่ามากเกินกว่าขอบเขตสูงสุดของชนิดข้อมูล เช่น byte (0–255) ถ้าเก็บค่า 256 จะวนกลับไปเป็น 0
2)Underflow คือการที่ค่าน้อยเกินกว่าขอบเขตต่ำสุด เช่น int (−2,147,483,648 ถึง 2,147,483,647) ถ้าลดลงต่ำกว่าค่าต่ำสุด จะวนกลับไปค่าบวกสูงสุด
3)ตัวอย่างจากใบงาน เมื่อกำหนดค่า myByte = 256 จะได้ผลลัพธ์เป็น 0 (เกิด overflow)

คำถาม การทราบขนาดของชนิดข้อมูลด้วย sizeof() มีประโยชน์อย่างไรในการเขียนโปรแกรมสำหรับไมโครคอนโทรลเลอร์ที่มีหน่วยความจำจำกัด
คำตอบ การใช้ sizeof() ทำให้ทราบว่าชนิดข้อมูลใช้หน่วยความจำกี่ไบต์ ช่วยให้นักพัฒนาเลือกใช้ชนิดข้อมูลที่เหมาะสม ลดการสิ้นเปลืองหน่วยความจำ และป้องกันปัญหาการเก็บค่าที่เกินขอบเขต ซึ่งสำคัญมากสำหรับไมโครคอนโทรลเลอร์ที่มีทรัพยากรจำกัด
